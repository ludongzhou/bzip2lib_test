#include <iostream>
#include "bzip2/bzlib.h"

using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    char raw_string[] = "hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. "
            "There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork."
            " Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for "
            "embedded applications.\n"
            "The low-level part of the library has no global variables and is therefore thread-safe.\n"
            "Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd "
            "for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd "
            "for decompression. The *Init functions allocate memory for compression/decompression and do other "
            "initialisations, whilst the *End functions close down operations and release memory.\n"
            "The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data"
            " fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof"
            " dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull"
            " style of activity, or producer-push, or a mixture of both.\n"
            "3.1.2. High-level summary\n"
            "This interface provides some handy wrappers around the low-level interface to facilitate reading and"
            " writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in "
            "which the bzip2 data stream is embedded within some larger-scale file structure, or where there are"
            " multiple bzip2 data streams concatenated end-to-end.\n"
            "For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied."
            " Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\n"
            "As with the low-level library, no global variables are used so the library is per se thread-safe. "
            "However, if I/O errors occur whilst reading or writing the underlying compressed files, you may "
            "have to consult errno to determine the cause of the error. In that case, you’d need a C library "
            "which correctly supports errno in a multithreaded environment.\n"
            "To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require "
            "you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively."
            " Thatavoids portability problems associated with file operations and file attributes, whilst not"
            " being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.hello world, Thisinterfaceprovidesservicesforcompressinganddecompressingdatainmemory. \"\n"
            "            \"There’snoprovisionfordealing withfiles,streamsoranyotherI/Omechanisms,juststraightmemory-to-memorywork.\"\n"
            "            \" Infact,thispartofthelibrary can be compiled without inclusion of stdio.h, which may be helpful for \"\n"
            "            \"embedded applications.\\n\"\n"
            "            \"The low-level part of the library has no global variables and is therefore thread-safe.\\n\"\n"
            "            \"Six routines make up the low level interface: BZ2_bzCompressInit, BZ2_bzCompress, and BZ2_bzCompressEnd \"\n"
            "            \"for compression, and a corresponding trio BZ2_bzDecompressInit, BZ2_bzDecompress and BZ2_bzDecompressEnd \"\n"
            "            \"for decompression. The *Init functions allocate memory for compression/decompression and do other \"\n"
            "            \"initialisations, whilst the *End functions close down operations and release memory.\\n\"\n"
            "            \"The real work is done by BZ2_bzCompress and BZ2_bzDecompress. These compress and decompress data\"\n"
            "            \" fromauser-suppliedinputbuffertoauser-suppliedoutputbuffer. Thesebufferscanbeanysize;arbitraryquantitiesof\"\n"
            "            \" dataarehandledbymakingrepeatedcallstothesefunctions. Thisisaflexiblemechanismallowingaconsumer-pull\"\n"
            "            \" style of activity, or producer-push, or a mixture of both.\\n\"\n"
            "            \"3.1.2. High-level summary\\n\"\n"
            "            \"This interface provides some handy wrappers around the low-level interface to facilitate reading and\"\n"
            "            \" writing bzip2 format files (.bz2 files). The routines provide hooks to facilitate reading files in \"\n"
            "            \"which the bzip2 data stream is embedded within some larger-scale file structure, or where there are\"\n"
            "            \" multiple bzip2 data streams concatenated end-to-end.\\n\"\n"
            "            \"For reading files, BZ2_bzReadOpen, BZ2_bzRead, BZ2_bzReadClose and BZ2_bzReadGetUnused are supplied.\"\n"
            "            \" Forwritingfiles,BZ2_bzWriteOpen,BZ2_bzWriteandBZ2_bzWriteFinishareavailable.\\n\"\n"
            "            \"As with the low-level library, no global variables are used so the library is per se thread-safe. \"\n"
            "            \"However, if I/O errors occur whilst reading or writing the underlying compressed files, you may \"\n"
            "            \"have to consult errno to determine the cause of the error. In that case, you’d need a C library \"\n"
            "            \"which correctly supports errno in a multithreaded environment.\\n\"\n"
            "            \"To make the library a little simpler and more portable, BZ2_bzReadOpen and BZ2_bzWriteOpen require \"\n"
            "            \"you to passthemfilehandles(FILE*s)whichhavepreviouslybeenopenedforreadingorwritingrespectively.\"\n"
            "            \" Thatavoids portability problems associated with file operations and file attributes, whilst not\"\n"
            "            \" being much of an imposition on the programmer.";
    //cout << raw_string << endl;
    cout << "string length: " << sizeof(raw_string) << endl;
    unsigned int dest_buff_size = (unsigned int)sizeof(raw_string) * 1.1 + 600;
    char* dest_buff = new char[dest_buff_size];
    unsigned int return_num = BZ2_bzBuffToBuffCompress(dest_buff, &dest_buff_size, raw_string, sizeof(raw_string), 9, 0, 30);
    if(return_num == BZ_OK){
        cout << "compressed size: " << dest_buff_size << endl;
    }
    else{
        cerr << "Error: " << return_num << endl;
    }
    delete[] dest_buff;
    return 0;
}